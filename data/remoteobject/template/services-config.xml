<?xml version="1.0" encoding="UTF-8"?>
<services-config>

    <!-- Example services-config.xml -->

    <services>        
        <!--
           Individual services may be defined in this file or broken into their own file.  We've chosen to include
           a separate configuration file for each type of service.  Please see those files for more details on the
           configuration specific to each of those types of service.
        -->
        <service-include file-path="remoting-config.xml" />
        <service-include file-path="proxy-config.xml" />
        <service-include file-path="messaging-config.xml" />                        
        
        <!--
           Custom bootstrap services can be defined here. Bootstrap services are used to dynamically create services,
           destinations, and adapters at server startup.
        -->
        <service id="bootstrap1" class="my.company.BootstrapService1"/>
        <service id="bootstrap2" class="my.company.BootstrapService2">
            <!-- Bootstrap services can also have custom properties that can be processed in initialize method -->
            <properties>
                <prop1>value1</prop1>
                <prop2>value2</prop2>
            </properties>
        </service>
        
        <!--
           Set the application level default channels to use as transport for all services.          
           Default channels can also be defined individually for each service and in that 
           case, application level default channels are overwritten by the service level
           default channels. Application level default channels are necessary when 
           a dynamic destination is being used and no ChannelSet has been defined for 
           the destination. In that case, application level default channels will be 
           used to contact the destination.
        -->        
        <default-channels>
            <channel ref="my-amf"/>
        </default-channels>
    </services>


    <security>
        <login-command class="flex.messaging.security.TomcatLoginCommand" server="Tomcat">        
            <!-- per-client-authentication is false by default.  Setting it to true allows
            	 multiple clients sharing the same session to have distinct authentication states.
            	 Two windows of the same browser for example could then authenticate users 
            	 independently.  Note that if this flag is true, a custom LoginCommand must be used
            	 and an application server based LoginCommand cannot be used.  
            -->        	
        	<per-client-authentication>false</per-client-authentication>
        </login-command>
        <!-- Uncomment the correct app server.  Add per-client-authentication="true".
        	 Note that if server is set to "all" for a login command, that login
        	 command will be used regardless of the application server in use.  For JBoss
        	 releases 4.2 and higher server should be set to JBoss; for earlier release of JBoss
        	 use Tomcat as the server value.  Note that you may have more than one login-command
        	 specified and the one corresponding to your server will be used.
        <login-command class="flex.messaging.security.TomcatLoginCommand" server="JBoss">
        <login-command class="flex.messaging.security.JRunLoginCommand" server="JRun">
        <login-command class="flex.messaging.security.WeblogicLoginCommand" server="Weblogic"/>
        <login-command class="flex.messaging.security.WebSphereLoginCommand" server="WebSphere"/>
        <login-command class="flex.messaging.security.OracleLoginCommand" server="Oracle"/>
        -->

        <security-constraint id="basic-read-access">
            <auth-method>Basic</auth-method>
            <roles>
                <role>guests</role>
                <role>accountants</role>
                <role>employees</role>
                <role>managers</role>
            </roles>
        </security-constraint>

        <security-constraint id="sample-users">
            <auth-method>Custom</auth-method>
            <roles>
                <role>sampleusers</role>
            </roles>
        </security-constraint>
    </security>
	
    <!--
        You can add your own component factory to BlazeDS.  When BlazeDS wants an 
        instance of a component for a particular remote object or FDMS 
        destination, it will call a method on your class which implements 
        flex.messaging.FlexFactory instead of creating this component itself. 
        This mechanism is designed to allow a more seamless integration of 3rd 
        party component management systems like Spring, EJB, etc. Your factory 
        itself can take initialization properties for the factory as a whole as
        specified in the properties tag under the factory tag. Each instance 
        that uses that factory can also take additional configuration properties
        via the properties tag for the destination that uses that factory. This
        configuration sample simply registers the default java factory under a 
        name.
    -->
    <factories>
        <factory id="myJavaFactory" class="flex.messaging.factories.JavaFactory" />
    </factories>

    <!-- 
        Channels define how clients communicate with server endpoints. A channel
        that makes use of a servlet mapping (such as an HTTP or AMF channel)
        must ensure an endpoint URL is distinguished by path info. A channel
        that makes use of a direct socket connection (such as an RTMP channel)
        must ensure an endpoint URL has a unique port number.
    -->
    <channels>
        <channel-definition id="my-amf" class="mx.messaging.channels.AMFChannel">
            <endpoint url="http://{server.name}:{server.port}/{context.root}/messagebroker/amf" class="flex.messaging.endpoints.AMFEndpoint"/>
            <properties>
                <polling-enabled>false</polling-enabled>
                <!-- Optional piggybacking setting. Enable to support piggybacking queued messaging
                     and data management subscription data along with responses to any messages the
                     client sends to the server over this channel. -->
                <piggybacking-enabled>true</piggybacking-enabled>
                <!-- Optional serialization properties. -->
                <serialization>
                    <!-- enable-small-messages is true by default. If enabled,
                    messages will be sent using an alternative smaller form if
                    one is available and is supported by the endpoint.
                    -->
                    <enable-small-messages>true</enable-small-messages>
                    <!-- ignore-property-errors is true by default. It determines
                        if the endpoint should throw an error when an incoming
                        client object has unexpected properties that cannot be 
                        set on the server object. 
                    -->
                    <ignore-property-errors>true</ignore-property-errors>
                    <!-- log-property-errors is false by default. When true, 
                        unexpected property errors are logged.
                    -->
                    <log-property-errors>false</log-property-errors>
                    <!-- To support legacy AMF type serialization used in earlier
                        versions of Flex, you can set legacy properties.
                    -->
                    <!-- legacy-collection is false by default. When true, 
                        instances of java.util.Collection are returned as 
                        ActionScript Arrays. When false, instance of 
                        java.util.Collection are returned as 
                        mx.collections.ArrayCollection (part of Flex 2 collections API)
                    -->
                    <legacy-collection>false</legacy-collection>
                    <!-- legacy-map is false by default. When true, java.util.Map 
                        instances are serialized as an ECMA Array or 
                        "associate array" instead of an anonymous Object.
                    -->
                    <legacy-map>false</legacy-map>
                    <!-- legacy-xml is false by default. When true, 
                        org.w3c.dom.Document instances are serialized as 
                        flash.xml.XMLDocument instances instead of intrinsic
                        XML (E4X capable) instances.
                    -->
                    <legacy-xml>false</legacy-xml>
                    <!-- legacy-xml-namespaces is false by default. When true, 
                        XML Documents created on server during deserialization
                        of XML passed-in from the client are NOT namespace aware.
                    -->
                    <legacy-xml-namespaces>false</legacy-xml-namespaces>                    
                    <!-- legacy-throwable is false by default. When true, 
                        java.lang.Throwable instances are serialized as AMF 
                        status-info objects (instead of normal bean serialization 
                        including read-only properties).
                    -->
                    <legacy-throwable>false</legacy-throwable>
                    <!-- type-marshaller specifies the implementation that 
                        translates an object into an instance of a desired 
                        class. This is used when invoking a Java method or 
                        populating a Java instance and the type of the input 
                        object from deserialization (e.g. an ActionScript 
                        anonymous Object is always deserialized as a 
                        java.util.HashMap) doesn't match the destination API 
                        (e.g. java.util.SortedMap) so the type can be marshaled 
                        into the desired type.
                    -->
                    <!-- restore-references is false by default. This is an 
                        advanced switch that asks the deserializer to keep track
                        of object references when a type translation has to be
                        made (i.e. when an anonymous Object is sent for a 
                        property of type java.util.SortedMap, the Object is first
                        deserialized to a java.util.Map as normal, and then 
                        translated to a suitable implementation of SortedMap 
                        (i.e. java.util.TreeMap). If other objects pointed to the
                        same anonymous Object in an object graph, this setting 
                        restores those references instead of creating new 
                        SortedMap implementations everywhere. This can significantly
                        slow down performance for large amounts of data, however. 
                    -->
                    <restore-references>false</restore-references>
                    <!-- instantiate-types is true by default. This is an 
                        advanced switch that asks the deserializer to not create
                        new instances of strongly typed objects but instead 
                        retains the type info and deserializes the raw 
                        properties in a Map implementation, namely 
                        flex.messaging.io.ASObject. Note that any classes under
                        flex.* package will always be instantiated. 
                    -->
                    <instantiate-types>true</instantiate-types>                    
                </serialization>
                <!-- Optional. Use this to limit the client channel's connect attempt 
                     to the specified time interval.
                <connect-timeout-seconds>5</connect-timeout-seconds>
                -->
                <!-- Optional. If enabled, when a disconnect message is received from a
                     client channel the corresponding server session will be invalidated.
                     If the client is closed without first disconnecting its channel, no
                     disconnect message is sent and the server session will invalidate 
                     after its idle timeout has elapsed. 
                     This is disabled by default.                    
                <invalidate-session-on-disconnect>true</invalidate-session-on-disconnect>
                -->
            </properties>
        </channel-definition>

        <!--  An AMF channel that uses HTTPS for secure communication can use
              the {server.port} token as a SWF must be loaded via a secure URL
              in order to make secure connections.
        -->
        <channel-definition id="my-secure-amf" class="mx.messaging.channels.SecureAMFChannel">
            <endpoint url="https://{server.name}:{server.port}/{context.root}/messagebroker/amfsecure" class="flex.messaging.endpoints.SecureAMFEndpoint"/>
            <properties>
            	<!--HTTPS requests on some browsers do not work when pragma "no-cache" are set-->
                <add-no-cache-headers>false</add-no-cache-headers>
                <!-- Optional. Use this to limit the client channel's connect attempt 
                     to the specified time interval.
                <connect-timeout-seconds>5</connect-timeout-seconds>
                -->
            </properties>
        </channel-definition>

        <channel-definition id="my-polling-amf" class="mx.messaging.channels.AMFChannel">
            <endpoint url="http://{server.name}:{server.port}/{context.root}/messagebroker/amfpolling" class="flex.messaging.endpoints.AMFEndpoint"/>
            <properties>
                <polling-enabled>true</polling-enabled>
                <!-- Optional. Default is 3000. This parameter specifies the number
                     of milliseconds the client waits before polling the server 
                     again.  When polling-interval-millis is 0, the client polls 
                     as soon as it receives a response from the server with no delay.
                -->
                <polling-interval-millis>8000</polling-interval-millis>
                <!-- Optional. Default is 0. This parameter specifies the number
                     of milliseconds the server poll response thread will wait
                     for new messages to arrive when the server has no messages
                     for the client at the time of poll request handling. 0 means 
                     that server does not wait for new messages for the client
                     and returns an empty acknowledgment as usual. -1 means that 
                     server waits indefinitely until new messages arrive for the 
                     client before responding the client poll request. 
                -->     
                <wait-interval-millis>0</wait-interval-millis>
                <!-- Optional. Default is 0. This parameter specifies the number of milliseconds the 
                     client will wait after it receives a poll response from the server that involved 
                     a server wait. 0 means that the client will use its configured polling-interval-millis
                     value to determine the wait until its next poll. Otherwise, this value will override 
                     the client's default polling interval. Setting this value to 1 will allow clients that 
                     poll the server with wait to poll immediately upon receiving a poll response, providing 
                     a real-time message stream from the server to the client. Any clients that poll the 
                     server and are not serviced with a server wait will use the polling-interval-millis value.
                -->
                <client-wait-interval-millis>0</client-wait-interval-millis>
                <!-- Optional. Default is 0. This parameter specifies the maximum
                     number of server poll response threads that can be in wait
                     state. When this limit is reached, the subsequent poll requests
                     will be treated as having zero wait-interval-millis.
                -->                  
                <max-waiting-poll-requests>0</max-waiting-poll-requests>
                <!-- Optional.  Default is false.  Setting this flag to true will cause clients
                	 to automatically attempt to re-authenticate themselves with the server when
                	 they send a message that fails because credentials have been reset due to server 
                	 session timeout.  The failed message will be resent after re-authentication making the
                	 session timeout transparent to the client with respect to authentication.
               	--> 
                <login-after-disconnect>false</login-after-disconnect>
                <!-- Optional. Use this to manage messaging quality of service for subscribers. 
                     Every client that subscribes to the server over this channel will have a unique instance 
                     of the specified outbound queue processor implementation that will manage the flow of 
                     messages to the client. This may include message conflation, filtering, scheduled delivery 
                     and load shedding. Configuration properties may be defined, and if so, they are used to 
                     configure each new queue processor instance that is created. Here's an example.
                <flex-client-outbound-queue-processor class="my.company.QoSQueueProcessor">
                    <properties>                        
                        <custom-property>5000</custom-property>
                    </properties>
                </flex-client-outbound-queue-processor>
                -->
                <!-- Optional. Use this to limit the client channel's connect attempt 
                     to the specified time interval.
                <connect-timeout-seconds>5</connect-timeout-seconds>
                -->
                <!-- Optional. If enabled, when a disconnect message is received from a
                     client channel the corresponding server session will be invalidated.
                     If the client is closed without first disconnecting its channel, no
                     disconnect message is sent and the server session will invalidate 
                     after its idle timeout has elapsed. 
                     This is disabled by default.                    
                <invalidate-session-on-disconnect>true</invalidate-session-on-disconnect>
                -->
            </properties>
        </channel-definition>

        <!-- A streaming AMF channel definition. Streaming AMF/HTTP channels are similar 
            to polling channels but instead of polling, a seperate HTTP connection 
            is opened for the streaming endpoint to push messages to the client. 
            This offers performance advantages over polling when the client is receiving 
            a steady, rapid stream of pushed messages.
        -->
        <channel-definition id="my-streaming-amf" class="mx.messaging.channels.StreamingAMFChannel">
            <endpoint url="http://{server.name}:{server.port}/{context.root}/messagebroker/streamingamf" class="flex.messaging.endpoints.StreamingAMFEndpoint"/>
            <properties>
                <!-- Optional. Default value is 0. This parameter specifies the number of minutes 
                     that a streaming channel is allowed to remain idle before being closed. 
                     Setting idle-timeout-minutes to 0 will disable the timeout. 
                     Note that this is a potential security concern. 
                <idle-timeout-minutes>0</idle-timeout-minutes>
                -->
                <!-- Optional. Default value is 10. Limits the number of streaming Flex clients 
                     using this endpoint. This should be adjusted by taking the number of threads
                     available on the server as each streaming connection open between the FlexClient
                     and the streaming endpoints uses a thread on the server. 
                <max-streaming-clients>10</max-streaming-clients>
                -->
                <!-- Optional. Default value is 5000. This is the the number of milliseconds 
                     the server will wait before writing a single null byte to the streaming 
                     connection to make sure the client is still available. This is important 
                     to determine when a client is gone so its associated thread on the server 
                     can be cleaned up. Note that this functionality will keep the session alive. 
                     A non-positive value disables this functionality. 
                <server-to-client-heartbeat-millis>5000</server-to-client-heartbeat-millis>  
                --> 
                <!-- Optional. Default values are as shown. User agents are used to customize 
                     the streaming endpoint for specific browsers. This is needed for two cases. 
                     First, in IE, a certain number of bytes need to be written before a streaming 
                     connection can be reliably used by the endpoint. This is specified by 
                     kickstart-bytes. Second, there is a browser specific limit to the number of HTTP
                     connections allowed per session. In Firefox, this value is 8 by default, in IE, 
                     it is 2. A single streaming connection requires two browser HTTP connections in 
                     order to send data in both directions. One for the streamed response from the server 
                     to the client that the channel hangs on to, and a second transient connection, drawn 
                     from the browser pool only when data needs to be sent to the server and this second 
                     transient connection is then immediately released back to the browser's connection pool.
                     In order for client applications to function properly, the number of HTTP connections made by all 
                     clients running in the same session (keep in mind that clients running in seperate browser 
                     windows can share the same HTTP session) needs to stay within the limit established by the 
                     browser. The max-streaming-connections-per-session setting is used to limit the 
                     number of streaming connections that can be made from clients in the same browser 
                     session. By default, the endpoint will use 1 for the max-streaming-connections-per-session 
                     value which should not be overwritten for IE. For Firefox this can be set as high as 4, which 
                     will allow 4 clients running in the same browser session to have a persistent connection for 
                     receiving messages and another connection which can be used for sending messages.  
                <user-agent-settings>
                    <user-agent match-on="MSIE" kickstart-bytes="2048" max-streaming-connections-per-session="1"/>
                    <user-agent match-on="Firefox" kickstart-bytes="0" max-streaming-connections-per-session="1"/>
                </user-agent-settings>
                -->
                <!-- Optional. If enabled, when a disconnect message is received from a
                     client channel the corresponding server session will be invalidated.
                     If the client is closed without first disconnecting its channel, no
                     disconnect message is sent and the server session will invalidate 
                     after its idle timeout has elapsed. 
                     This is disabled by default.                    
                <invalidate-session-on-disconnect>true</invalidate-session-on-disconnect>
                -->
            </properties>
        </channel-definition>

        <!-- You can use the HTTP and secure HTTP channels to connect to the HTTP endpoint, which
        supports HTTP requests and responses. These channels use a text-based (XML) message
        format.
        -->
        <channel-definition id="my-http" class="mx.messaging.channels.HTTPChannel">
            <endpoint url="http://{server.name}:{server.port}/{context.root}/messagebroker/http" class="flex.messaging.endpoints.HTTPEndpoint"/>
            <properties>
                <!-- Optional piggybacking setting. Enable to support piggybacking queued messaging
                     and data management subscription data along with responses to any messages the
                     client sends to the server over this channel. -->
                <piggybacking-enabled>true</piggybacking-enabled>
                <!-- Optional. If enabled, when a disconnect message is received from a
                     client channel the corresponding server session will be invalidated.
                     If the client is closed without first disconnecting its channel, no
                     disconnect message is sent and the server session will invalidate 
                     after its idle timeout has elapsed. 
                     This is disabled by default.                    
                <invalidate-session-on-disconnect>true</invalidate-session-on-disconnect>
                -->
            </properties>
        </channel-definition>

        <!--  HTTPS based channels can use the {server.port} token as a SWF
              must be loaded via a secure URL in order to make secure
              connections.
        -->
        <channel-definition id="my-secure-http" class="mx.messaging.channels.SecureHTTPChannel">
            <endpoint url="https://{server.name}:{server.port}/{context.root}/messagebroker/httpsecure" class="flex.messaging.endpoints.SecureHTTPEndpoint"/>
            <properties>
            	<!--HTTPS requests on some browsers do not work when pragma "no-cache" are set-->
                <add-no-cache-headers>false</add-no-cache-headers>
            </properties>
        </channel-definition>

        <!--  A polling HTTP channel, similar to polling AMF channels.
        -->
        <channel-definition id="my-polling-http" class="mx.messaging.channels.HTTPChannel">
                <endpoint url="http://{server.name}:{server.port}/{context.root}/messagebroker/httppolling" class="flex.messaging.endpoints.HTTPEndpoint"/>
                <properties>
                    <polling-enabled>true</polling-enabled>
                    <polling-interval-millis>2000</polling-interval-millis>
                </properties>
        </channel-definition>


    </channels>

    <logging>
        <!--
           Configuration for server-side logging
           target class possible values:
             flex.messaging.log.ConsoleTarget - logs to System.out
             flex.messaging.log.ServletLogTarget - logs to the servlet logger
           level possible values: None|Fatal|Error|Warn|Info|Debug|All
        -->
        <target class="flex.messaging.log.ConsoleTarget" level="Error">
            <properties>
                <prefix>[BlazeDS] </prefix>
                <includeDate>false</includeDate>
                <includeTime>false</includeTime>
                <includeLevel>false</includeLevel>
                <includeCategory>false</includeCategory>
            </properties>
            <filters>
                <!--
                   Possible values:
                     Client.*
                     Client.FlexClient
                     Client.MessageClient
                     Configuration
                     Endpoint.*
                     Endpoint.General
                     Endpoint.AMF
                     Endpoint.FlexSession
                     Endpoint.HTTP
                     Endpoint.Type
                     Message.*
                     Message.General
                     Message.Command.*
                     Message.Command.(operation-name)
                       where operation-name is one of subscribe, unsubscribe, poll, poll_interval, client_sync,
                       server_ping, client_ping, cluster_request, login, logout                     
                     Message.coldfusion
                     Message.Remoting
                     Message.RPC
                     Message.Selector
                     Message.Timing
                     Resource
                     Protocol.*
                     Service.*
                     Service.Cluster
                     Service.HTTP
                     Service.Message
                     Service.Message.*
                     Service.Message.JMS
                     Service.Remoting
                     Security
                     Startup.*
                     Startup.MessageBroker
                     Startup.Service
                     Startup.Destination
                     Timeout                 
                -->
                <pattern>Endpoint.*</pattern>
                <pattern>Service.*</pattern>
                <pattern>Configuration</pattern>
            </filters>
        </target>
    </logging>
    
    <!-- 
        BlazeDS software cluster definition.
        To enable this feature, jgroups.jar should be copied from {blazeds_install}/resources/clustering 
        folder to WEB-INF/lib folder. And, jgroups-default.xml and/or jgroups-tcp.xml should be copied from
        {blazeds_install}/resources/clustering folder to WEB-INF/flex folder.
    -->
    <clusters>
        <cluster id="default-cluster" properties="jgroups-default.xml" />    
        <cluster id="another-cluster" properties="jgroups-tcp.xml" />
        <!-- 
          This tag defines a cluster which is enabled by default and disables the url-load-balancing. 
          By default when you use a cluster in BlazeDS, it gathers the endpoint URLs from all servers
          and sends them to the clients so the clients can implement failover between servers with
          different domain names.  If you are using HW load balancing for HTTP and RTMP connections
          you can disable this logic by setting url-load-balancing=false.  In this mode, the client
          connects to each channel using the same URL and the load balancer routes you to an
          available server.  When url-load-balancing is true (the default), you cannot use
          {server.name} and {server.port} tokens in your URLs.  Instead, you must specify the
          unique server name and port clients will use to reach each server in that server's configuration. 
        -->
        <!-- <cluster id="default-cluster" properties="jgroups-tcp.xml" default="true" url-load-balancing="false"> -->
    </clusters>
    
        

    <system>
        <!--
           Support for localization of server-side fault messages.
           If the resource in the specified default locale is not available, the default system locale will
           be used, otherwise, a core set of error messages in US English is used.
        -->
        <locale>
            <default-locale>en</default-locale>
        </locale>

        <!-- 
           Optional. Default is true. Determines whether MessageBroker is manageable or not. 
        -->
        <manageable>true</manageable>
        
        <!--
           Support for web application redeploy when configuration files are updated.
           This works with the J2EE appplication server web application redeployment.
           The watch-file and touch-file must start with {context.root} or be an absolute path.
           The touch-file is the file used by your application server to force web redeployment.
           Check the application server to confirm what the touch-file should be.
        -->
        <redeploy>
            <enabled>true</enabled>
            <watch-interval>20</watch-interval>
            <watch-file>{context.root}/WEB-INF/flex/services-config.xml</watch-file>
            <watch-file>{context.root}/WEB-INF/flex/proxy-config.xml</watch-file>
            <watch-file>{context.root}/WEB-INF/flex/remoting-config.xml</watch-file>
            <watch-file>{context.root}/WEB-INF/flex/messaging-config.xml</watch-file>            
            <touch-file>{context.root}/WEB-INF/web.xml</touch-file>
        </redeploy>
    </system>

    <flex-client>
        <!--
           Each Flex application that connects to the server triggers the creation of a 
           FlexClient instance that represents the remote client application. If timeout-minutes
           is left undefined or set to 0, FlexClient instances on the server are shutdown once 
           all associated FlexSessions (corresponding to connections between the client and server)
           are shutdown. 
           If this value is defined, FlexClient instances will be kept alive for this amount of
           idle time. Only define this for applications that use HTTP-based channels (which are not
           scoped to a specific client swf) where you want to aggressively clean up idle FlexClient
           instances but the client browser will continue to interact with the server and prevent
           the HttpSession from timing out.           
        -->
        <timeout-minutes>45</timeout-minutes>
    </flex-client>

</services-config>
